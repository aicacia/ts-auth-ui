/* tslint:disable */
/* eslint-disable */
/**
 * Auth API
 * Auth API API
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: nathanfaucett@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UserInfoAddress } from './UserInfoAddress';
import {
    UserInfoAddressFromJSON,
    UserInfoAddressFromJSONTyped,
    UserInfoAddressToJSON,
} from './UserInfoAddress';

/**
 * 
 * @export
 * @interface UserInfo
 */
export interface UserInfo {
    /**
     * 
     * @type {UserInfoAddress}
     * @memberof UserInfo
     */
    address?: UserInfoAddress;
    /**
     * 
     * @type {Date}
     * @memberof UserInfo
     */
    birthdate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UserInfo
     */
    created_at: Date;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    family_name?: string;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    gender?: string;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    given_name?: string;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    locale?: string;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    middle_name?: string;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    nickname?: string;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    picture?: string;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    preferred_username: string;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    profile?: string;
    /**
     * 
     * @type {Date}
     * @memberof UserInfo
     */
    updated_at: Date;
    /**
     * 
     * @type {number}
     * @memberof UserInfo
     */
    user_id: number;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    website?: string;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    zoneinfo?: string;
}

/**
 * Check if a given object implements the UserInfo interface.
 */
export function instanceOfUserInfo(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "created_at" in value;
    isInstance = isInstance && "preferred_username" in value;
    isInstance = isInstance && "updated_at" in value;
    isInstance = isInstance && "user_id" in value;

    return isInstance;
}

export function UserInfoFromJSON(json: any): UserInfo {
    return UserInfoFromJSONTyped(json, false);
}

export function UserInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'address': !exists(json, 'address') ? undefined : UserInfoAddressFromJSON(json['address']),
        'birthdate': !exists(json, 'birthdate') ? undefined : (new Date(json['birthdate'])),
        'created_at': (new Date(json['created_at'])),
        'family_name': !exists(json, 'family_name') ? undefined : json['family_name'],
        'gender': !exists(json, 'gender') ? undefined : json['gender'],
        'given_name': !exists(json, 'given_name') ? undefined : json['given_name'],
        'locale': !exists(json, 'locale') ? undefined : json['locale'],
        'middle_name': !exists(json, 'middle_name') ? undefined : json['middle_name'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'nickname': !exists(json, 'nickname') ? undefined : json['nickname'],
        'picture': !exists(json, 'picture') ? undefined : json['picture'],
        'preferred_username': json['preferred_username'],
        'profile': !exists(json, 'profile') ? undefined : json['profile'],
        'updated_at': (new Date(json['updated_at'])),
        'user_id': json['user_id'],
        'website': !exists(json, 'website') ? undefined : json['website'],
        'zoneinfo': !exists(json, 'zoneinfo') ? undefined : json['zoneinfo'],
    };
}

export function UserInfoToJSON(value?: UserInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'address': UserInfoAddressToJSON(value.address),
        'birthdate': value.birthdate === undefined ? undefined : (value.birthdate.toISOString()),
        'created_at': (value.created_at.toISOString()),
        'family_name': value.family_name,
        'gender': value.gender,
        'given_name': value.given_name,
        'locale': value.locale,
        'middle_name': value.middle_name,
        'name': value.name,
        'nickname': value.nickname,
        'picture': value.picture,
        'preferred_username': value.preferred_username,
        'profile': value.profile,
        'updated_at': (value.updated_at.toISOString()),
        'user_id': value.user_id,
        'website': value.website,
        'zoneinfo': value.zoneinfo,
    };
}

