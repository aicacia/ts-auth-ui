/* tslint:disable */
/* eslint-disable */
/**
 * Auth API
 * Auth API API
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: nathanfaucett@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ApplicationTenent
 */
export interface ApplicationTenent {
    /**
     * 
     * @type {string}
     * @memberof ApplicationTenent
     */
    algorithm: string;
    /**
     * 
     * @type {number}
     * @memberof ApplicationTenent
     */
    application_id: number;
    /**
     * 
     * @type {string}
     * @memberof ApplicationTenent
     */
    client_id: string;
    /**
     * 
     * @type {Date}
     * @memberof ApplicationTenent
     */
    created_at: Date;
    /**
     * 
     * @type {string}
     * @memberof ApplicationTenent
     */
    description: string;
    /**
     * 
     * @type {number}
     * @memberof ApplicationTenent
     */
    expires_in_seconds: number;
    /**
     * 
     * @type {number}
     * @memberof ApplicationTenent
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof ApplicationTenent
     */
    public_key?: string;
    /**
     * 
     * @type {string}
     * @memberof ApplicationTenent
     */
    public_uri?: string;
    /**
     * 
     * @type {number}
     * @memberof ApplicationTenent
     */
    refresh_expires_in_seconds: number;
    /**
     * 
     * @type {Date}
     * @memberof ApplicationTenent
     */
    updated_at: Date;
    /**
     * 
     * @type {string}
     * @memberof ApplicationTenent
     */
    uri: string;
}

/**
 * Check if a given object implements the ApplicationTenent interface.
 */
export function instanceOfApplicationTenent(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "algorithm" in value;
    isInstance = isInstance && "application_id" in value;
    isInstance = isInstance && "client_id" in value;
    isInstance = isInstance && "created_at" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "expires_in_seconds" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "refresh_expires_in_seconds" in value;
    isInstance = isInstance && "updated_at" in value;
    isInstance = isInstance && "uri" in value;

    return isInstance;
}

export function ApplicationTenentFromJSON(json: any): ApplicationTenent {
    return ApplicationTenentFromJSONTyped(json, false);
}

export function ApplicationTenentFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApplicationTenent {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'algorithm': json['algorithm'],
        'application_id': json['application_id'],
        'client_id': json['client_id'],
        'created_at': (new Date(json['created_at'])),
        'description': json['description'],
        'expires_in_seconds': json['expires_in_seconds'],
        'id': json['id'],
        'public_key': !exists(json, 'public_key') ? undefined : json['public_key'],
        'public_uri': !exists(json, 'public_uri') ? undefined : json['public_uri'],
        'refresh_expires_in_seconds': json['refresh_expires_in_seconds'],
        'updated_at': (new Date(json['updated_at'])),
        'uri': json['uri'],
    };
}

export function ApplicationTenentToJSON(value?: ApplicationTenent | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'algorithm': value.algorithm,
        'application_id': value.application_id,
        'client_id': value.client_id,
        'created_at': (value.created_at.toISOString()),
        'description': value.description,
        'expires_in_seconds': value.expires_in_seconds,
        'id': value.id,
        'public_key': value.public_key,
        'public_uri': value.public_uri,
        'refresh_expires_in_seconds': value.refresh_expires_in_seconds,
        'updated_at': (value.updated_at.toISOString()),
        'uri': value.uri,
    };
}

