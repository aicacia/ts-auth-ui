/* tslint:disable */
/* eslint-disable */
/**
 * Auth API
 * Auth API API
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: nathanfaucett@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface OpenIDConfiguration
 */
export interface OpenIDConfiguration {
    /**
     * 
     * @type {string}
     * @memberof OpenIDConfiguration
     */
    authorization_endpoint?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OpenIDConfiguration
     */
    claims_supported: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof OpenIDConfiguration
     */
    code_challenge_methods_supported: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof OpenIDConfiguration
     */
    grant_types_supported: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof OpenIDConfiguration
     */
    id_token_signing_alg_values_supported: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof OpenIDConfiguration
     */
    issuer: string;
    /**
     * 
     * @type {string}
     * @memberof OpenIDConfiguration
     */
    jwks_uri?: string;
    /**
     * 
     * @type {string}
     * @memberof OpenIDConfiguration
     */
    registration_endpoint?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OpenIDConfiguration
     */
    response_types_supported: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof OpenIDConfiguration
     */
    scopes_supported: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof OpenIDConfiguration
     */
    subject_types_supported: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof OpenIDConfiguration
     */
    token_endpoint: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OpenIDConfiguration
     */
    token_endpoint_auth_methods_supported: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof OpenIDConfiguration
     */
    userinfo_endpoint: string;
}

/**
 * Check if a given object implements the OpenIDConfiguration interface.
 */
export function instanceOfOpenIDConfiguration(value: object): boolean {
    if (!('claims_supported' in value)) return false;
    if (!('code_challenge_methods_supported' in value)) return false;
    if (!('grant_types_supported' in value)) return false;
    if (!('id_token_signing_alg_values_supported' in value)) return false;
    if (!('issuer' in value)) return false;
    if (!('response_types_supported' in value)) return false;
    if (!('scopes_supported' in value)) return false;
    if (!('subject_types_supported' in value)) return false;
    if (!('token_endpoint' in value)) return false;
    if (!('token_endpoint_auth_methods_supported' in value)) return false;
    if (!('userinfo_endpoint' in value)) return false;
    return true;
}

export function OpenIDConfigurationFromJSON(json: any): OpenIDConfiguration {
    return OpenIDConfigurationFromJSONTyped(json, false);
}

export function OpenIDConfigurationFromJSONTyped(json: any, ignoreDiscriminator: boolean): OpenIDConfiguration {
    if (json == null) {
        return json;
    }
    return {
        
        'authorization_endpoint': json['authorization_endpoint'] == null ? undefined : json['authorization_endpoint'],
        'claims_supported': json['claims_supported'],
        'code_challenge_methods_supported': json['code_challenge_methods_supported'],
        'grant_types_supported': json['grant_types_supported'],
        'id_token_signing_alg_values_supported': json['id_token_signing_alg_values_supported'],
        'issuer': json['issuer'],
        'jwks_uri': json['jwks_uri'] == null ? undefined : json['jwks_uri'],
        'registration_endpoint': json['registration_endpoint'] == null ? undefined : json['registration_endpoint'],
        'response_types_supported': json['response_types_supported'],
        'scopes_supported': json['scopes_supported'],
        'subject_types_supported': json['subject_types_supported'],
        'token_endpoint': json['token_endpoint'],
        'token_endpoint_auth_methods_supported': json['token_endpoint_auth_methods_supported'],
        'userinfo_endpoint': json['userinfo_endpoint'],
    };
}

export function OpenIDConfigurationToJSON(value?: OpenIDConfiguration | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'authorization_endpoint': value['authorization_endpoint'],
        'claims_supported': value['claims_supported'],
        'code_challenge_methods_supported': value['code_challenge_methods_supported'],
        'grant_types_supported': value['grant_types_supported'],
        'id_token_signing_alg_values_supported': value['id_token_signing_alg_values_supported'],
        'issuer': value['issuer'],
        'jwks_uri': value['jwks_uri'],
        'registration_endpoint': value['registration_endpoint'],
        'response_types_supported': value['response_types_supported'],
        'scopes_supported': value['scopes_supported'],
        'subject_types_supported': value['subject_types_supported'],
        'token_endpoint': value['token_endpoint'],
        'token_endpoint_auth_methods_supported': value['token_endpoint_auth_methods_supported'],
        'userinfo_endpoint': value['userinfo_endpoint'],
    };
}

