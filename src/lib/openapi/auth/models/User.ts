/* tslint:disable */
/* eslint-disable */
/**
 * Auth API
 * Auth API API
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: nathanfaucett@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Email } from './Email';
import {
    EmailFromJSON,
    EmailFromJSONTyped,
    EmailToJSON,
} from './Email';
import type { PhoneNumber } from './PhoneNumber';
import {
    PhoneNumberFromJSON,
    PhoneNumberFromJSONTyped,
    PhoneNumberToJSON,
} from './PhoneNumber';

/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {Date}
     * @memberof User
     */
    created_at: Date;
    /**
     * 
     * @type {Email}
     * @memberof User
     */
    email?: Email;
    /**
     * 
     * @type {Array<Email>}
     * @memberof User
     */
    emails: Array<Email>;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    id: number;
    /**
     * 
     * @type {PhoneNumber}
     * @memberof User
     */
    phone_number?: PhoneNumber;
    /**
     * 
     * @type {Array<PhoneNumber>}
     * @memberof User
     */
    phone_numbers: Array<PhoneNumber>;
    /**
     * 
     * @type {Date}
     * @memberof User
     */
    updated_at: Date;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    username: string;
}

/**
 * Check if a given object implements the User interface.
 */
export function instanceOfUser(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "created_at" in value;
    isInstance = isInstance && "emails" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "phone_numbers" in value;
    isInstance = isInstance && "updated_at" in value;
    isInstance = isInstance && "username" in value;

    return isInstance;
}

export function UserFromJSON(json: any): User {
    return UserFromJSONTyped(json, false);
}

export function UserFromJSONTyped(json: any, ignoreDiscriminator: boolean): User {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'created_at': (new Date(json['created_at'])),
        'email': !exists(json, 'email') ? undefined : EmailFromJSON(json['email']),
        'emails': ((json['emails'] as Array<any>).map(EmailFromJSON)),
        'id': json['id'],
        'phone_number': !exists(json, 'phone_number') ? undefined : PhoneNumberFromJSON(json['phone_number']),
        'phone_numbers': ((json['phone_numbers'] as Array<any>).map(PhoneNumberFromJSON)),
        'updated_at': (new Date(json['updated_at'])),
        'username': json['username'],
    };
}

export function UserToJSON(value?: User | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'created_at': (value.created_at.toISOString()),
        'email': EmailToJSON(value.email),
        'emails': ((value.emails as Array<any>).map(EmailToJSON)),
        'id': value.id,
        'phone_number': PhoneNumberToJSON(value.phone_number),
        'phone_numbers': ((value.phone_numbers as Array<any>).map(PhoneNumberToJSON)),
        'updated_at': (value.updated_at.toISOString()),
        'username': value.username,
    };
}

