/* tslint:disable */
/* eslint-disable */
/**
 * Auth API
 * Auth API API
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: nathanfaucett@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Email } from './Email';
import {
    EmailFromJSON,
    EmailFromJSONTyped,
    EmailToJSON,
} from './Email';
import type { PhoneNumber } from './PhoneNumber';
import {
    PhoneNumberFromJSON,
    PhoneNumberFromJSONTyped,
    PhoneNumberToJSON,
} from './PhoneNumber';

/**
 * 
 * @export
 * @interface UserWithPermissions
 */
export interface UserWithPermissions {
    /**
     * 
     * @type {number}
     * @memberof UserWithPermissions
     */
    application_id: number;
    /**
     * 
     * @type {Date}
     * @memberof UserWithPermissions
     */
    created_at: Date;
    /**
     * 
     * @type {Email}
     * @memberof UserWithPermissions
     */
    email?: Email;
    /**
     * 
     * @type {Array<Email>}
     * @memberof UserWithPermissions
     */
    emails: Array<Email>;
    /**
     * 
     * @type {number}
     * @memberof UserWithPermissions
     */
    id: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserWithPermissions
     */
    permissions: Array<string>;
    /**
     * 
     * @type {PhoneNumber}
     * @memberof UserWithPermissions
     */
    phone_number?: PhoneNumber;
    /**
     * 
     * @type {Array<PhoneNumber>}
     * @memberof UserWithPermissions
     */
    phone_numbers: Array<PhoneNumber>;
    /**
     * 
     * @type {Date}
     * @memberof UserWithPermissions
     */
    updated_at: Date;
    /**
     * 
     * @type {string}
     * @memberof UserWithPermissions
     */
    username: string;
}

/**
 * Check if a given object implements the UserWithPermissions interface.
 */
export function instanceOfUserWithPermissions(value: object): boolean {
    if (!('application_id' in value)) return false;
    if (!('created_at' in value)) return false;
    if (!('emails' in value)) return false;
    if (!('id' in value)) return false;
    if (!('permissions' in value)) return false;
    if (!('phone_numbers' in value)) return false;
    if (!('updated_at' in value)) return false;
    if (!('username' in value)) return false;
    return true;
}

export function UserWithPermissionsFromJSON(json: any): UserWithPermissions {
    return UserWithPermissionsFromJSONTyped(json, false);
}

export function UserWithPermissionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserWithPermissions {
    if (json == null) {
        return json;
    }
    return {
        
        'application_id': json['application_id'],
        'created_at': (new Date(json['created_at'])),
        'email': json['email'] == null ? undefined : EmailFromJSON(json['email']),
        'emails': ((json['emails'] as Array<any>).map(EmailFromJSON)),
        'id': json['id'],
        'permissions': json['permissions'],
        'phone_number': json['phone_number'] == null ? undefined : PhoneNumberFromJSON(json['phone_number']),
        'phone_numbers': ((json['phone_numbers'] as Array<any>).map(PhoneNumberFromJSON)),
        'updated_at': (new Date(json['updated_at'])),
        'username': json['username'],
    };
}

export function UserWithPermissionsToJSON(value?: UserWithPermissions | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'application_id': value['application_id'],
        'created_at': ((value['created_at']).toISOString()),
        'email': EmailToJSON(value['email']),
        'emails': ((value['emails'] as Array<any>).map(EmailToJSON)),
        'id': value['id'],
        'permissions': value['permissions'],
        'phone_number': PhoneNumberToJSON(value['phone_number']),
        'phone_numbers': ((value['phone_numbers'] as Array<any>).map(PhoneNumberToJSON)),
        'updated_at': ((value['updated_at']).toISOString()),
        'username': value['username'],
    };
}

