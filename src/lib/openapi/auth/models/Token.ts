/* tslint:disable */
/* eslint-disable */
/**
 * Auth API
 * Auth API API
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: nathanfaucett@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Token
 */
export interface Token {
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    access_token: string;
    /**
     * 
     * @type {number}
     * @memberof Token
     */
    expires_in: number;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    id_token?: string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    issued_token_type: string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    refresh_token: string;
    /**
     * 
     * @type {number}
     * @memberof Token
     */
    refresh_token_expires_in: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof Token
     */
    scope: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    token_type: string;
}

/**
 * Check if a given object implements the Token interface.
 */
export function instanceOfToken(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "access_token" in value;
    isInstance = isInstance && "expires_in" in value;
    isInstance = isInstance && "issued_token_type" in value;
    isInstance = isInstance && "refresh_token" in value;
    isInstance = isInstance && "refresh_token_expires_in" in value;
    isInstance = isInstance && "scope" in value;
    isInstance = isInstance && "token_type" in value;

    return isInstance;
}

export function TokenFromJSON(json: any): Token {
    return TokenFromJSONTyped(json, false);
}

export function TokenFromJSONTyped(json: any, ignoreDiscriminator: boolean): Token {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'access_token': json['access_token'],
        'expires_in': json['expires_in'],
        'id_token': !exists(json, 'id_token') ? undefined : json['id_token'],
        'issued_token_type': json['issued_token_type'],
        'refresh_token': json['refresh_token'],
        'refresh_token_expires_in': json['refresh_token_expires_in'],
        'scope': json['scope'],
        'token_type': json['token_type'],
    };
}

export function TokenToJSON(value?: Token | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'access_token': value.access_token,
        'expires_in': value.expires_in,
        'id_token': value.id_token,
        'issued_token_type': value.issued_token_type,
        'refresh_token': value.refresh_token,
        'refresh_token_expires_in': value.refresh_token_expires_in,
        'scope': value.scope,
        'token_type': value.token_type,
    };
}

