/* tslint:disable */
/* eslint-disable */
/**
 * Auth API
 * Auth API API
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: nathanfaucett@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ConfirmPhoneNumber,
  CreatePhoneNumber,
  PhoneNumber,
} from '../models/index';
import {
    ConfirmPhoneNumberFromJSON,
    ConfirmPhoneNumberToJSON,
    CreatePhoneNumberFromJSON,
    CreatePhoneNumberToJSON,
    PhoneNumberFromJSON,
    PhoneNumberToJSON,
} from '../models/index';

export interface UsersUserIdPhoneNumbersIdConfirmPatchRequest {
    userId: number;
    id: number;
    confirmPhoneNumber: ConfirmPhoneNumber;
}

export interface UsersUserIdPhoneNumbersIdDeleteRequest {
    userId: number;
    id: number;
}

export interface UsersUserIdPhoneNumbersIdSendConfirmationPatchRequest {
    userId: number;
    id: number;
}

export interface UsersUserIdPhoneNumbersIdSetPrimaryPatchRequest {
    userId: number;
    id: number;
}

export interface UsersUserIdPhoneNumbersPostRequest {
    userId: number;
    createPhoneNumber: CreatePhoneNumber;
}

/**
 * UserPhoneNumberApi - interface
 * 
 * @export
 * @interface UserPhoneNumberApiInterface
 */
export interface UserPhoneNumberApiInterface {
    /**
     * 
     * @summary Confirm phone_number with token
     * @param {number} userId user id
     * @param {number} id phone_number id
     * @param {ConfirmPhoneNumber} confirmPhoneNumber phone_number confirmation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserPhoneNumberApiInterface
     */
    usersUserIdPhoneNumbersIdConfirmPatchRaw(requestParameters: UsersUserIdPhoneNumbersIdConfirmPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PhoneNumber>>;

    /**
     * Confirm phone_number with token
     */
    usersUserIdPhoneNumbersIdConfirmPatch(userId: number, id: number, confirmPhoneNumber: ConfirmPhoneNumber, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PhoneNumber>;

    /**
     * 
     * @summary Delete user phone number
     * @param {number} userId user id
     * @param {number} id phone_number id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserPhoneNumberApiInterface
     */
    usersUserIdPhoneNumbersIdDeleteRaw(requestParameters: UsersUserIdPhoneNumbersIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete user phone number
     */
    usersUserIdPhoneNumbersIdDelete(userId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Send confirmation token to user phone_number
     * @param {number} userId user id
     * @param {number} id phone_number id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserPhoneNumberApiInterface
     */
    usersUserIdPhoneNumbersIdSendConfirmationPatchRaw(requestParameters: UsersUserIdPhoneNumbersIdSendConfirmationPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Send confirmation token to user phone_number
     */
    usersUserIdPhoneNumbersIdSendConfirmationPatch(userId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Set a comfirmed phone to primary
     * @param {number} userId user id
     * @param {number} id email id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserPhoneNumberApiInterface
     */
    usersUserIdPhoneNumbersIdSetPrimaryPatchRaw(requestParameters: UsersUserIdPhoneNumbersIdSetPrimaryPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Set a comfirmed phone to primary
     */
    usersUserIdPhoneNumbersIdSetPrimaryPatch(userId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Create user phone number
     * @param {number} userId user id
     * @param {CreatePhoneNumber} createPhoneNumber update phone_number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserPhoneNumberApiInterface
     */
    usersUserIdPhoneNumbersPostRaw(requestParameters: UsersUserIdPhoneNumbersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PhoneNumber>>;

    /**
     * Create user phone number
     */
    usersUserIdPhoneNumbersPost(userId: number, createPhoneNumber: CreatePhoneNumber, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PhoneNumber>;

}

/**
 * 
 */
export class UserPhoneNumberApi extends runtime.BaseAPI implements UserPhoneNumberApiInterface {

    /**
     * Confirm phone_number with token
     */
    async usersUserIdPhoneNumbersIdConfirmPatchRaw(requestParameters: UsersUserIdPhoneNumbersIdConfirmPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PhoneNumber>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling usersUserIdPhoneNumbersIdConfirmPatch.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersUserIdPhoneNumbersIdConfirmPatch.');
        }

        if (requestParameters.confirmPhoneNumber === null || requestParameters.confirmPhoneNumber === undefined) {
            throw new runtime.RequiredError('confirmPhoneNumber','Required parameter requestParameters.confirmPhoneNumber was null or undefined when calling usersUserIdPhoneNumbersIdConfirmPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/users/{userId}/phone-numbers/{id}/confirm`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ConfirmPhoneNumberToJSON(requestParameters.confirmPhoneNumber),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PhoneNumberFromJSON(jsonValue));
    }

    /**
     * Confirm phone_number with token
     */
    async usersUserIdPhoneNumbersIdConfirmPatch(userId: number, id: number, confirmPhoneNumber: ConfirmPhoneNumber, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PhoneNumber> {
        const response = await this.usersUserIdPhoneNumbersIdConfirmPatchRaw({ userId: userId, id: id, confirmPhoneNumber: confirmPhoneNumber }, initOverrides);
        return await response.value();
    }

    /**
     * Delete user phone number
     */
    async usersUserIdPhoneNumbersIdDeleteRaw(requestParameters: UsersUserIdPhoneNumbersIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling usersUserIdPhoneNumbersIdDelete.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersUserIdPhoneNumbersIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/users/{userId}/phone-numbers/{id}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete user phone number
     */
    async usersUserIdPhoneNumbersIdDelete(userId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersUserIdPhoneNumbersIdDeleteRaw({ userId: userId, id: id }, initOverrides);
    }

    /**
     * Send confirmation token to user phone_number
     */
    async usersUserIdPhoneNumbersIdSendConfirmationPatchRaw(requestParameters: UsersUserIdPhoneNumbersIdSendConfirmationPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling usersUserIdPhoneNumbersIdSendConfirmationPatch.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersUserIdPhoneNumbersIdSendConfirmationPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/users/{userId}/phone-numbers/{id}/send-confirmation`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Send confirmation token to user phone_number
     */
    async usersUserIdPhoneNumbersIdSendConfirmationPatch(userId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersUserIdPhoneNumbersIdSendConfirmationPatchRaw({ userId: userId, id: id }, initOverrides);
    }

    /**
     * Set a comfirmed phone to primary
     */
    async usersUserIdPhoneNumbersIdSetPrimaryPatchRaw(requestParameters: UsersUserIdPhoneNumbersIdSetPrimaryPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling usersUserIdPhoneNumbersIdSetPrimaryPatch.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersUserIdPhoneNumbersIdSetPrimaryPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/users/{userId}/phone-numbers/{id}/set-primary`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Set a comfirmed phone to primary
     */
    async usersUserIdPhoneNumbersIdSetPrimaryPatch(userId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersUserIdPhoneNumbersIdSetPrimaryPatchRaw({ userId: userId, id: id }, initOverrides);
    }

    /**
     * Create user phone number
     */
    async usersUserIdPhoneNumbersPostRaw(requestParameters: UsersUserIdPhoneNumbersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PhoneNumber>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling usersUserIdPhoneNumbersPost.');
        }

        if (requestParameters.createPhoneNumber === null || requestParameters.createPhoneNumber === undefined) {
            throw new runtime.RequiredError('createPhoneNumber','Required parameter requestParameters.createPhoneNumber was null or undefined when calling usersUserIdPhoneNumbersPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/users/{userId}/phone-numbers`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePhoneNumberToJSON(requestParameters.createPhoneNumber),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PhoneNumberFromJSON(jsonValue));
    }

    /**
     * Create user phone number
     */
    async usersUserIdPhoneNumbersPost(userId: number, createPhoneNumber: CreatePhoneNumber, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PhoneNumber> {
        const response = await this.usersUserIdPhoneNumbersPostRaw({ userId: userId, createPhoneNumber: createPhoneNumber }, initOverrides);
        return await response.value();
    }

}
