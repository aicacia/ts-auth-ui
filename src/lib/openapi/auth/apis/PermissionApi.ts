/* tslint:disable */
/* eslint-disable */
/**
 * Auth API
 * Auth API API
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: nathanfaucett@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreatePermission,
  Errors,
  Permission,
  UpdatePermission,
} from '../models/index';
import {
    CreatePermissionFromJSON,
    CreatePermissionToJSON,
    ErrorsFromJSON,
    ErrorsToJSON,
    PermissionFromJSON,
    PermissionToJSON,
    UpdatePermissionFromJSON,
    UpdatePermissionToJSON,
} from '../models/index';

export interface AddApplicationPermissionToUserRequest {
    applicationId: number;
    id: number;
    userId: number;
}

export interface ApplicationPermissionByIdRequest {
    applicationId: number;
    id: string;
}

export interface ApplicationPermissionsRequest {
    applicationId: number;
}

export interface CreateApplicationPermissionRequest {
    applicationId: number;
    application: CreatePermission;
}

export interface DeleteApplicationPermissionRequest {
    applicationId: number;
    id: string;
}

export interface RemoveApplicationPermissionFromUserRequest {
    applicationId: number;
    id: number;
    userId: number;
}

export interface UpdateApplicationPermissionRequest {
    applicationId: number;
    id: number;
    application: UpdatePermission;
}

/**
 * PermissionApi - interface
 * 
 * @export
 * @interface PermissionApiInterface
 */
export interface PermissionApiInterface {
    /**
     * 
     * @summary Add permission to user
     * @param {number} applicationId application id
     * @param {number} id application permission id
     * @param {number} userId user id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionApiInterface
     */
    addApplicationPermissionToUserRaw(requestParameters: AddApplicationPermissionToUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Add permission to user
     */
    addApplicationPermissionToUser(applicationId: number, id: number, userId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get application permission by id
     * @param {number} applicationId application id
     * @param {string} id application permission id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionApiInterface
     */
    applicationPermissionByIdRaw(requestParameters: ApplicationPermissionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Permission>>;

    /**
     * Get application permission by id
     */
    applicationPermissionById(applicationId: number, id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Permission>;

    /**
     * 
     * @summary Get application permissions
     * @param {number} applicationId application id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionApiInterface
     */
    applicationPermissionsRaw(requestParameters: ApplicationPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Permission>>>;

    /**
     * Get application permissions
     */
    applicationPermissions(applicationId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Permission>>;

    /**
     * 
     * @summary Create application permission
     * @param {number} applicationId application id
     * @param {CreatePermission} application create application
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionApiInterface
     */
    createApplicationPermissionRaw(requestParameters: CreateApplicationPermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Permission>>;

    /**
     * Create application permission
     */
    createApplicationPermission(applicationId: number, application: CreatePermission, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Permission>;

    /**
     * 
     * @summary Delete application permission
     * @param {number} applicationId application id
     * @param {string} id application permission id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionApiInterface
     */
    deleteApplicationPermissionRaw(requestParameters: DeleteApplicationPermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete application permission
     */
    deleteApplicationPermission(applicationId: number, id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Remove permission from user
     * @param {number} applicationId application id
     * @param {number} id application permission id
     * @param {number} userId user id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionApiInterface
     */
    removeApplicationPermissionFromUserRaw(requestParameters: RemoveApplicationPermissionFromUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Remove permission from user
     */
    removeApplicationPermissionFromUser(applicationId: number, id: number, userId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Update application permission
     * @param {number} applicationId application id
     * @param {number} id application permission id
     * @param {UpdatePermission} application update application
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionApiInterface
     */
    updateApplicationPermissionRaw(requestParameters: UpdateApplicationPermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Permission>>;

    /**
     * Update application permission
     */
    updateApplicationPermission(applicationId: number, id: number, application: UpdatePermission, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Permission>;

}

/**
 * 
 */
export class PermissionApi extends runtime.BaseAPI implements PermissionApiInterface {

    /**
     * Add permission to user
     */
    async addApplicationPermissionToUserRaw(requestParameters: AddApplicationPermissionToUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['applicationId'] == null) {
            throw new runtime.RequiredError(
                'applicationId',
                'Required parameter "applicationId" was null or undefined when calling addApplicationPermissionToUser().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling addApplicationPermissionToUser().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling addApplicationPermissionToUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/applications/{applicationId}/permissions/{id}/add-user/{userId}`.replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters['applicationId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add permission to user
     */
    async addApplicationPermissionToUser(applicationId: number, id: number, userId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addApplicationPermissionToUserRaw({ applicationId: applicationId, id: id, userId: userId }, initOverrides);
    }

    /**
     * Get application permission by id
     */
    async applicationPermissionByIdRaw(requestParameters: ApplicationPermissionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Permission>> {
        if (requestParameters['applicationId'] == null) {
            throw new runtime.RequiredError(
                'applicationId',
                'Required parameter "applicationId" was null or undefined when calling applicationPermissionById().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling applicationPermissionById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/applications/{applicationId}/permissions/{id}`.replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters['applicationId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionFromJSON(jsonValue));
    }

    /**
     * Get application permission by id
     */
    async applicationPermissionById(applicationId: number, id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Permission> {
        const response = await this.applicationPermissionByIdRaw({ applicationId: applicationId, id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Get application permissions
     */
    async applicationPermissionsRaw(requestParameters: ApplicationPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Permission>>> {
        if (requestParameters['applicationId'] == null) {
            throw new runtime.RequiredError(
                'applicationId',
                'Required parameter "applicationId" was null or undefined when calling applicationPermissions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/applications/{applicationId}/permissions`.replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters['applicationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PermissionFromJSON));
    }

    /**
     * Get application permissions
     */
    async applicationPermissions(applicationId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Permission>> {
        const response = await this.applicationPermissionsRaw({ applicationId: applicationId }, initOverrides);
        return await response.value();
    }

    /**
     * Create application permission
     */
    async createApplicationPermissionRaw(requestParameters: CreateApplicationPermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Permission>> {
        if (requestParameters['applicationId'] == null) {
            throw new runtime.RequiredError(
                'applicationId',
                'Required parameter "applicationId" was null or undefined when calling createApplicationPermission().'
            );
        }

        if (requestParameters['application'] == null) {
            throw new runtime.RequiredError(
                'application',
                'Required parameter "application" was null or undefined when calling createApplicationPermission().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/applications/{applicationId}/permissions`.replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters['applicationId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePermissionToJSON(requestParameters['application']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionFromJSON(jsonValue));
    }

    /**
     * Create application permission
     */
    async createApplicationPermission(applicationId: number, application: CreatePermission, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Permission> {
        const response = await this.createApplicationPermissionRaw({ applicationId: applicationId, application: application }, initOverrides);
        return await response.value();
    }

    /**
     * Delete application permission
     */
    async deleteApplicationPermissionRaw(requestParameters: DeleteApplicationPermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['applicationId'] == null) {
            throw new runtime.RequiredError(
                'applicationId',
                'Required parameter "applicationId" was null or undefined when calling deleteApplicationPermission().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteApplicationPermission().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/applications/{applicationId}/permissions/{id}`.replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters['applicationId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete application permission
     */
    async deleteApplicationPermission(applicationId: number, id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteApplicationPermissionRaw({ applicationId: applicationId, id: id }, initOverrides);
    }

    /**
     * Remove permission from user
     */
    async removeApplicationPermissionFromUserRaw(requestParameters: RemoveApplicationPermissionFromUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['applicationId'] == null) {
            throw new runtime.RequiredError(
                'applicationId',
                'Required parameter "applicationId" was null or undefined when calling removeApplicationPermissionFromUser().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removeApplicationPermissionFromUser().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling removeApplicationPermissionFromUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/applications/{applicationId}/permissions/{id}/remove-user/{userId}`.replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters['applicationId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove permission from user
     */
    async removeApplicationPermissionFromUser(applicationId: number, id: number, userId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeApplicationPermissionFromUserRaw({ applicationId: applicationId, id: id, userId: userId }, initOverrides);
    }

    /**
     * Update application permission
     */
    async updateApplicationPermissionRaw(requestParameters: UpdateApplicationPermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Permission>> {
        if (requestParameters['applicationId'] == null) {
            throw new runtime.RequiredError(
                'applicationId',
                'Required parameter "applicationId" was null or undefined when calling updateApplicationPermission().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateApplicationPermission().'
            );
        }

        if (requestParameters['application'] == null) {
            throw new runtime.RequiredError(
                'application',
                'Required parameter "application" was null or undefined when calling updateApplicationPermission().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/applications/{applicationId}/permissions/{id}`.replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters['applicationId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePermissionToJSON(requestParameters['application']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionFromJSON(jsonValue));
    }

    /**
     * Update application permission
     */
    async updateApplicationPermission(applicationId: number, id: number, application: UpdatePermission, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Permission> {
        const response = await this.updateApplicationPermissionRaw({ applicationId: applicationId, id: id, application: application }, initOverrides);
        return await response.value();
    }

}
