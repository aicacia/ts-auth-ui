/* tslint:disable */
/* eslint-disable */
/**
 * Auth API
 * Auth API API
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: nathanfaucett@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RegisterRequest,
  Token,
} from '../models/index';
import {
    RegisterRequestFromJSON,
    RegisterRequestToJSON,
    TokenFromJSON,
    TokenToJSON,
} from '../models/index';

export interface RegisterPostRequest {
    registerRequest: RegisterRequest;
}

/**
 * RegisterApi - interface
 * 
 * @export
 * @interface RegisterApiInterface
 */
export interface RegisterApiInterface {
    /**
     * 
     * @summary Register as a new user
     * @param {RegisterRequest} registerRequest token request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisterApiInterface
     */
    registerPostRaw(requestParameters: RegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Token>>;

    /**
     * Register as a new user
     */
    registerPost(registerRequest: RegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Token>;

}

/**
 * 
 */
export class RegisterApi extends runtime.BaseAPI implements RegisterApiInterface {

    /**
     * Register as a new user
     */
    async registerPostRaw(requestParameters: RegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Token>> {
        if (requestParameters.registerRequest === null || requestParameters.registerRequest === undefined) {
            throw new runtime.RequiredError('registerRequest','Required parameter requestParameters.registerRequest was null or undefined when calling registerPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Tenent-Id"] = this.configuration.apiKey("Tenent-Id"); // ApplicationTenentId authentication
        }

        const response = await this.request({
            path: `/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterRequestToJSON(requestParameters.registerRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenFromJSON(jsonValue));
    }

    /**
     * Register as a new user
     */
    async registerPost(registerRequest: RegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Token> {
        const response = await this.registerPostRaw({ registerRequest: registerRequest }, initOverrides);
        return await response.value();
    }

}
