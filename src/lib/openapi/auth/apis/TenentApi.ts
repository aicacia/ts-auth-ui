/* tslint:disable */
/* eslint-disable */
/**
 * Auth API
 * Auth API API
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: nathanfaucett@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateTenent,
  Errors,
  PaginationTenent,
  Tenent,
  UpdateTenent,
} from '../models/index';
import {
    CreateTenentFromJSON,
    CreateTenentToJSON,
    ErrorsFromJSON,
    ErrorsToJSON,
    PaginationTenentFromJSON,
    PaginationTenentToJSON,
    TenentFromJSON,
    TenentToJSON,
    UpdateTenentFromJSON,
    UpdateTenentToJSON,
} from '../models/index';

export interface ApplicationTenentByIdRequest {
    applicationId: number;
    id: number;
}

export interface ApplicationTenentsRequest {
    applicationId: number;
    limit?: number;
    offset?: number;
}

export interface CreateApplicationTenentRequest {
    applicationId: number;
    application: CreateTenent;
}

export interface DeleteApplicationTenentRequest {
    applicationId: number;
    id: number;
}

export interface UpdateApplicationTenentRequest {
    applicationId: number;
    id: number;
    application: UpdateTenent;
}

/**
 * TenentApi - interface
 * 
 * @export
 * @interface TenentApiInterface
 */
export interface TenentApiInterface {
    /**
     * 
     * @summary Get application tenent by id
     * @param {number} applicationId application id
     * @param {number} id application tenent id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenentApiInterface
     */
    applicationTenentByIdRaw(requestParameters: ApplicationTenentByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tenent>>;

    /**
     * Get application tenent by id
     */
    applicationTenentById(applicationId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tenent>;

    /**
     * 
     * @summary Get application tenents
     * @param {number} applicationId application id
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenentApiInterface
     */
    applicationTenentsRaw(requestParameters: ApplicationTenentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginationTenent>>;

    /**
     * Get application tenents
     */
    applicationTenents(applicationId: number, limit?: number, offset?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginationTenent>;

    /**
     * 
     * @summary Create application tenent
     * @param {number} applicationId application id
     * @param {CreateTenent} application create application
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenentApiInterface
     */
    createApplicationTenentRaw(requestParameters: CreateApplicationTenentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tenent>>;

    /**
     * Create application tenent
     */
    createApplicationTenent(applicationId: number, application: CreateTenent, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tenent>;

    /**
     * 
     * @summary Delete application tenent
     * @param {number} applicationId application id
     * @param {number} id application tenent id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenentApiInterface
     */
    deleteApplicationTenentRaw(requestParameters: DeleteApplicationTenentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete application tenent
     */
    deleteApplicationTenent(applicationId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Update application tenent
     * @param {number} applicationId application id
     * @param {number} id application tenent id
     * @param {UpdateTenent} application update application
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenentApiInterface
     */
    updateApplicationTenentRaw(requestParameters: UpdateApplicationTenentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tenent>>;

    /**
     * Update application tenent
     */
    updateApplicationTenent(applicationId: number, id: number, application: UpdateTenent, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tenent>;

}

/**
 * 
 */
export class TenentApi extends runtime.BaseAPI implements TenentApiInterface {

    /**
     * Get application tenent by id
     */
    async applicationTenentByIdRaw(requestParameters: ApplicationTenentByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tenent>> {
        if (requestParameters['applicationId'] == null) {
            throw new runtime.RequiredError(
                'applicationId',
                'Required parameter "applicationId" was null or undefined when calling applicationTenentById().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling applicationTenentById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/applications/{applicationId}/tenents/{id}`.replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters['applicationId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TenentFromJSON(jsonValue));
    }

    /**
     * Get application tenent by id
     */
    async applicationTenentById(applicationId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tenent> {
        const response = await this.applicationTenentByIdRaw({ applicationId: applicationId, id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Get application tenents
     */
    async applicationTenentsRaw(requestParameters: ApplicationTenentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginationTenent>> {
        if (requestParameters['applicationId'] == null) {
            throw new runtime.RequiredError(
                'applicationId',
                'Required parameter "applicationId" was null or undefined when calling applicationTenents().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/applications/{applicationId}/tenents`.replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters['applicationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginationTenentFromJSON(jsonValue));
    }

    /**
     * Get application tenents
     */
    async applicationTenents(applicationId: number, limit?: number, offset?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginationTenent> {
        const response = await this.applicationTenentsRaw({ applicationId: applicationId, limit: limit, offset: offset }, initOverrides);
        return await response.value();
    }

    /**
     * Create application tenent
     */
    async createApplicationTenentRaw(requestParameters: CreateApplicationTenentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tenent>> {
        if (requestParameters['applicationId'] == null) {
            throw new runtime.RequiredError(
                'applicationId',
                'Required parameter "applicationId" was null or undefined when calling createApplicationTenent().'
            );
        }

        if (requestParameters['application'] == null) {
            throw new runtime.RequiredError(
                'application',
                'Required parameter "application" was null or undefined when calling createApplicationTenent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/applications/{applicationId}/tenents`.replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters['applicationId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTenentToJSON(requestParameters['application']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TenentFromJSON(jsonValue));
    }

    /**
     * Create application tenent
     */
    async createApplicationTenent(applicationId: number, application: CreateTenent, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tenent> {
        const response = await this.createApplicationTenentRaw({ applicationId: applicationId, application: application }, initOverrides);
        return await response.value();
    }

    /**
     * Delete application tenent
     */
    async deleteApplicationTenentRaw(requestParameters: DeleteApplicationTenentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['applicationId'] == null) {
            throw new runtime.RequiredError(
                'applicationId',
                'Required parameter "applicationId" was null or undefined when calling deleteApplicationTenent().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteApplicationTenent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/applications/{applicationId}/tenents/{id}`.replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters['applicationId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete application tenent
     */
    async deleteApplicationTenent(applicationId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteApplicationTenentRaw({ applicationId: applicationId, id: id }, initOverrides);
    }

    /**
     * Update application tenent
     */
    async updateApplicationTenentRaw(requestParameters: UpdateApplicationTenentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tenent>> {
        if (requestParameters['applicationId'] == null) {
            throw new runtime.RequiredError(
                'applicationId',
                'Required parameter "applicationId" was null or undefined when calling updateApplicationTenent().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateApplicationTenent().'
            );
        }

        if (requestParameters['application'] == null) {
            throw new runtime.RequiredError(
                'application',
                'Required parameter "application" was null or undefined when calling updateApplicationTenent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/applications/{applicationId}/tenents/{id}`.replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters['applicationId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTenentToJSON(requestParameters['application']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TenentFromJSON(jsonValue));
    }

    /**
     * Update application tenent
     */
    async updateApplicationTenent(applicationId: number, id: number, application: UpdateTenent, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tenent> {
        const response = await this.updateApplicationTenentRaw({ applicationId: applicationId, id: id, application: application }, initOverrides);
        return await response.value();
    }

}
