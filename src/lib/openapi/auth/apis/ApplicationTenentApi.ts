/* tslint:disable */
/* eslint-disable */
/**
 * Auth API
 * Auth API API
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: nathanfaucett@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApplicationTenent,
  CreateApplicationTenent,
  PaginationApplicationTenent,
  UpdateApplicationTenent,
} from '../models/index';
import {
    ApplicationTenentFromJSON,
    ApplicationTenentToJSON,
    CreateApplicationTenentFromJSON,
    CreateApplicationTenentToJSON,
    PaginationApplicationTenentFromJSON,
    PaginationApplicationTenentToJSON,
    UpdateApplicationTenentFromJSON,
    UpdateApplicationTenentToJSON,
} from '../models/index';

export interface ApplicationsApplicationIdTenentsGetRequest {
    applicationId: number;
    limit?: number;
    offset?: number;
}

export interface ApplicationsApplicationIdTenentsIdDeleteRequest {
    applicationId: number;
    id: number;
}

export interface ApplicationsApplicationIdTenentsIdGetRequest {
    applicationId: number;
    id: number;
}

export interface ApplicationsApplicationIdTenentsIdPatchRequest {
    applicationId: number;
    id: number;
    application: UpdateApplicationTenent;
}

export interface ApplicationsApplicationIdTenentsPostRequest {
    applicationId: number;
    application: CreateApplicationTenent;
}

/**
 * ApplicationTenentApi - interface
 * 
 * @export
 * @interface ApplicationTenentApiInterface
 */
export interface ApplicationTenentApiInterface {
    /**
     * 
     * @summary Get application tenents
     * @param {number} applicationId application id
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationTenentApiInterface
     */
    applicationsApplicationIdTenentsGetRaw(requestParameters: ApplicationsApplicationIdTenentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginationApplicationTenent>>;

    /**
     * Get application tenents
     */
    applicationsApplicationIdTenentsGet(applicationId: number, limit?: number, offset?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginationApplicationTenent>;

    /**
     * 
     * @summary Delete application tenent
     * @param {number} applicationId application id
     * @param {number} id application tenent id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationTenentApiInterface
     */
    applicationsApplicationIdTenentsIdDeleteRaw(requestParameters: ApplicationsApplicationIdTenentsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete application tenent
     */
    applicationsApplicationIdTenentsIdDelete(applicationId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get application tenent by id
     * @param {number} applicationId application id
     * @param {number} id application tenent id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationTenentApiInterface
     */
    applicationsApplicationIdTenentsIdGetRaw(requestParameters: ApplicationsApplicationIdTenentsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApplicationTenent>>;

    /**
     * Get application tenent by id
     */
    applicationsApplicationIdTenentsIdGet(applicationId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApplicationTenent>;

    /**
     * 
     * @summary Update application tenent
     * @param {number} applicationId application id
     * @param {number} id application tenent id
     * @param {UpdateApplicationTenent} application update application
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationTenentApiInterface
     */
    applicationsApplicationIdTenentsIdPatchRaw(requestParameters: ApplicationsApplicationIdTenentsIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApplicationTenent>>;

    /**
     * Update application tenent
     */
    applicationsApplicationIdTenentsIdPatch(applicationId: number, id: number, application: UpdateApplicationTenent, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApplicationTenent>;

    /**
     * 
     * @summary Create application tenent
     * @param {number} applicationId application id
     * @param {CreateApplicationTenent} application create application
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationTenentApiInterface
     */
    applicationsApplicationIdTenentsPostRaw(requestParameters: ApplicationsApplicationIdTenentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApplicationTenent>>;

    /**
     * Create application tenent
     */
    applicationsApplicationIdTenentsPost(applicationId: number, application: CreateApplicationTenent, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApplicationTenent>;

}

/**
 * 
 */
export class ApplicationTenentApi extends runtime.BaseAPI implements ApplicationTenentApiInterface {

    /**
     * Get application tenents
     */
    async applicationsApplicationIdTenentsGetRaw(requestParameters: ApplicationsApplicationIdTenentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginationApplicationTenent>> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling applicationsApplicationIdTenentsGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/applications/{applicationId}/tenents`.replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters.applicationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginationApplicationTenentFromJSON(jsonValue));
    }

    /**
     * Get application tenents
     */
    async applicationsApplicationIdTenentsGet(applicationId: number, limit?: number, offset?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginationApplicationTenent> {
        const response = await this.applicationsApplicationIdTenentsGetRaw({ applicationId: applicationId, limit: limit, offset: offset }, initOverrides);
        return await response.value();
    }

    /**
     * Delete application tenent
     */
    async applicationsApplicationIdTenentsIdDeleteRaw(requestParameters: ApplicationsApplicationIdTenentsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling applicationsApplicationIdTenentsIdDelete.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling applicationsApplicationIdTenentsIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/applications/{applicationId}/tenents/{id}`.replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters.applicationId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete application tenent
     */
    async applicationsApplicationIdTenentsIdDelete(applicationId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.applicationsApplicationIdTenentsIdDeleteRaw({ applicationId: applicationId, id: id }, initOverrides);
    }

    /**
     * Get application tenent by id
     */
    async applicationsApplicationIdTenentsIdGetRaw(requestParameters: ApplicationsApplicationIdTenentsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApplicationTenent>> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling applicationsApplicationIdTenentsIdGet.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling applicationsApplicationIdTenentsIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/applications/{applicationId}/tenents/{id}`.replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters.applicationId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationTenentFromJSON(jsonValue));
    }

    /**
     * Get application tenent by id
     */
    async applicationsApplicationIdTenentsIdGet(applicationId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApplicationTenent> {
        const response = await this.applicationsApplicationIdTenentsIdGetRaw({ applicationId: applicationId, id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Update application tenent
     */
    async applicationsApplicationIdTenentsIdPatchRaw(requestParameters: ApplicationsApplicationIdTenentsIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApplicationTenent>> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling applicationsApplicationIdTenentsIdPatch.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling applicationsApplicationIdTenentsIdPatch.');
        }

        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling applicationsApplicationIdTenentsIdPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/applications/{applicationId}/tenents/{id}`.replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters.applicationId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateApplicationTenentToJSON(requestParameters.application),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationTenentFromJSON(jsonValue));
    }

    /**
     * Update application tenent
     */
    async applicationsApplicationIdTenentsIdPatch(applicationId: number, id: number, application: UpdateApplicationTenent, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApplicationTenent> {
        const response = await this.applicationsApplicationIdTenentsIdPatchRaw({ applicationId: applicationId, id: id, application: application }, initOverrides);
        return await response.value();
    }

    /**
     * Create application tenent
     */
    async applicationsApplicationIdTenentsPostRaw(requestParameters: ApplicationsApplicationIdTenentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApplicationTenent>> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling applicationsApplicationIdTenentsPost.');
        }

        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling applicationsApplicationIdTenentsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/applications/{applicationId}/tenents`.replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters.applicationId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateApplicationTenentToJSON(requestParameters.application),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationTenentFromJSON(jsonValue));
    }

    /**
     * Create application tenent
     */
    async applicationsApplicationIdTenentsPost(applicationId: number, application: CreateApplicationTenent, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApplicationTenent> {
        const response = await this.applicationsApplicationIdTenentsPostRaw({ applicationId: applicationId, application: application }, initOverrides);
        return await response.value();
    }

}
