/* tslint:disable */
/* eslint-disable */
/**
 * Auth API
 * Auth API API
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: nathanfaucett@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  UpdateUserInfoRequest,
  UserInfo,
} from '../models/index';
import {
    UpdateUserInfoRequestFromJSON,
    UpdateUserInfoRequestToJSON,
    UserInfoFromJSON,
    UserInfoToJSON,
} from '../models/index';

export interface UserinfoPatchRequest {
    userinfoUpdates: UpdateUserInfoRequest;
}

/**
 * UserinfoApi - interface
 * 
 * @export
 * @interface UserinfoApiInterface
 */
export interface UserinfoApiInterface {
    /**
     * 
     * @summary Get user info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserinfoApiInterface
     */
    userinfoGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserInfo>>;

    /**
     * Get user info
     */
    userinfoGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserInfo>;

    /**
     * 
     * @summary Updates the user\'s info
     * @param {UpdateUserInfoRequest} userinfoUpdates User info updates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserinfoApiInterface
     */
    userinfoPatchRaw(requestParameters: UserinfoPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserInfo>>;

    /**
     * Updates the user\'s info
     */
    userinfoPatch(userinfoUpdates: UpdateUserInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserInfo>;

}

/**
 * 
 */
export class UserinfoApi extends runtime.BaseAPI implements UserinfoApiInterface {

    /**
     * Get user info
     */
    async userinfoGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserInfo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/userinfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserInfoFromJSON(jsonValue));
    }

    /**
     * Get user info
     */
    async userinfoGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserInfo> {
        const response = await this.userinfoGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Updates the user\'s info
     */
    async userinfoPatchRaw(requestParameters: UserinfoPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserInfo>> {
        if (requestParameters.userinfoUpdates === null || requestParameters.userinfoUpdates === undefined) {
            throw new runtime.RequiredError('userinfoUpdates','Required parameter requestParameters.userinfoUpdates was null or undefined when calling userinfoPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/userinfo`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserInfoRequestToJSON(requestParameters.userinfoUpdates),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserInfoFromJSON(jsonValue));
    }

    /**
     * Updates the user\'s info
     */
    async userinfoPatch(userinfoUpdates: UpdateUserInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserInfo> {
        const response = await this.userinfoPatchRaw({ userinfoUpdates: userinfoUpdates }, initOverrides);
        return await response.value();
    }

}
