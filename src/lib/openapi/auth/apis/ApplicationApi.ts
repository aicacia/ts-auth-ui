/* tslint:disable */
/* eslint-disable */
/**
 * Auth API
 * Auth API API
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: nathanfaucett@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Application,
  CreateApplication,
  PaginationApplication,
  UpdateApplication,
} from '../models/index';
import {
    ApplicationFromJSON,
    ApplicationToJSON,
    CreateApplicationFromJSON,
    CreateApplicationToJSON,
    PaginationApplicationFromJSON,
    PaginationApplicationToJSON,
    UpdateApplicationFromJSON,
    UpdateApplicationToJSON,
} from '../models/index';

export interface ApplicationsGetRequest {
    limit?: number;
    offset?: number;
}

export interface ApplicationsIdDeleteRequest {
    id: number;
}

export interface ApplicationsIdGetRequest {
    id: number;
}

export interface ApplicationsIdPatchRequest {
    id: number;
    application: UpdateApplication;
}

export interface ApplicationsPostRequest {
    application: CreateApplication;
}

/**
 * ApplicationApi - interface
 * 
 * @export
 * @interface ApplicationApiInterface
 */
export interface ApplicationApiInterface {
    /**
     * 
     * @summary Get applications
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApiInterface
     */
    applicationsGetRaw(requestParameters: ApplicationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginationApplication>>;

    /**
     * Get applications
     */
    applicationsGet(limit?: number, offset?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginationApplication>;

    /**
     * 
     * @summary Delete application
     * @param {number} id application id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApiInterface
     */
    applicationsIdDeleteRaw(requestParameters: ApplicationsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete application
     */
    applicationsIdDelete(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get application by id
     * @param {number} id application id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApiInterface
     */
    applicationsIdGetRaw(requestParameters: ApplicationsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Application>>;

    /**
     * Get application by id
     */
    applicationsIdGet(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Application>;

    /**
     * 
     * @summary Update application
     * @param {number} id application id
     * @param {UpdateApplication} application update application
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApiInterface
     */
    applicationsIdPatchRaw(requestParameters: ApplicationsIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Application>>;

    /**
     * Update application
     */
    applicationsIdPatch(id: number, application: UpdateApplication, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Application>;

    /**
     * 
     * @summary Create application
     * @param {CreateApplication} application create application
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApiInterface
     */
    applicationsPostRaw(requestParameters: ApplicationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Application>>;

    /**
     * Create application
     */
    applicationsPost(application: CreateApplication, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Application>;

}

/**
 * 
 */
export class ApplicationApi extends runtime.BaseAPI implements ApplicationApiInterface {

    /**
     * Get applications
     */
    async applicationsGetRaw(requestParameters: ApplicationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginationApplication>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/applications`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginationApplicationFromJSON(jsonValue));
    }

    /**
     * Get applications
     */
    async applicationsGet(limit?: number, offset?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginationApplication> {
        const response = await this.applicationsGetRaw({ limit: limit, offset: offset }, initOverrides);
        return await response.value();
    }

    /**
     * Delete application
     */
    async applicationsIdDeleteRaw(requestParameters: ApplicationsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling applicationsIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/applications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete application
     */
    async applicationsIdDelete(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.applicationsIdDeleteRaw({ id: id }, initOverrides);
    }

    /**
     * Get application by id
     */
    async applicationsIdGetRaw(requestParameters: ApplicationsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Application>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling applicationsIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/applications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationFromJSON(jsonValue));
    }

    /**
     * Get application by id
     */
    async applicationsIdGet(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Application> {
        const response = await this.applicationsIdGetRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Update application
     */
    async applicationsIdPatchRaw(requestParameters: ApplicationsIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Application>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling applicationsIdPatch.');
        }

        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling applicationsIdPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/applications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateApplicationToJSON(requestParameters.application),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationFromJSON(jsonValue));
    }

    /**
     * Update application
     */
    async applicationsIdPatch(id: number, application: UpdateApplication, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Application> {
        const response = await this.applicationsIdPatchRaw({ id: id, application: application }, initOverrides);
        return await response.value();
    }

    /**
     * Create application
     */
    async applicationsPostRaw(requestParameters: ApplicationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Application>> {
        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling applicationsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/applications`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateApplicationToJSON(requestParameters.application),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationFromJSON(jsonValue));
    }

    /**
     * Create application
     */
    async applicationsPost(application: CreateApplication, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Application> {
        const response = await this.applicationsPostRaw({ application: application }, initOverrides);
        return await response.value();
    }

}
