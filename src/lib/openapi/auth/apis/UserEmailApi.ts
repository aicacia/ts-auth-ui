/* tslint:disable */
/* eslint-disable */
/**
 * Auth API
 * Auth API API
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: nathanfaucett@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ConfirmEmail,
  CreateEmail,
  Email,
} from '../models/index';
import {
    ConfirmEmailFromJSON,
    ConfirmEmailToJSON,
    CreateEmailFromJSON,
    CreateEmailToJSON,
    EmailFromJSON,
    EmailToJSON,
} from '../models/index';

export interface UsersUserIdEmailsIdConfirmPatchRequest {
    userId: number;
    id: number;
    confirmEmail: ConfirmEmail;
}

export interface UsersUserIdEmailsIdDeleteRequest {
    userId: number;
    id: number;
}

export interface UsersUserIdEmailsIdSendConfirmationPatchRequest {
    userId: number;
    id: number;
}

export interface UsersUserIdEmailsPostRequest {
    userId: number;
    id: number;
    createEmail: CreateEmail;
}

/**
 * UserEmailApi - interface
 * 
 * @export
 * @interface UserEmailApiInterface
 */
export interface UserEmailApiInterface {
    /**
     * 
     * @summary Confirm email with token
     * @param {number} userId user id
     * @param {number} id email id
     * @param {ConfirmEmail} confirmEmail email confirmation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserEmailApiInterface
     */
    usersUserIdEmailsIdConfirmPatchRaw(requestParameters: UsersUserIdEmailsIdConfirmPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Email>>;

    /**
     * Confirm email with token
     */
    usersUserIdEmailsIdConfirmPatch(userId: number, id: number, confirmEmail: ConfirmEmail, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Email>;

    /**
     * 
     * @summary Delete user email
     * @param {number} userId user id
     * @param {number} id email id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserEmailApiInterface
     */
    usersUserIdEmailsIdDeleteRaw(requestParameters: UsersUserIdEmailsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete user email
     */
    usersUserIdEmailsIdDelete(userId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Send confirmation token to user email
     * @param {number} userId user id
     * @param {number} id email id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserEmailApiInterface
     */
    usersUserIdEmailsIdSendConfirmationPatchRaw(requestParameters: UsersUserIdEmailsIdSendConfirmationPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Send confirmation token to user email
     */
    usersUserIdEmailsIdSendConfirmationPatch(userId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Create user email
     * @param {number} userId user id
     * @param {number} id email id
     * @param {CreateEmail} createEmail update email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserEmailApiInterface
     */
    usersUserIdEmailsPostRaw(requestParameters: UsersUserIdEmailsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Email>>;

    /**
     * Create user email
     */
    usersUserIdEmailsPost(userId: number, id: number, createEmail: CreateEmail, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Email>;

}

/**
 * 
 */
export class UserEmailApi extends runtime.BaseAPI implements UserEmailApiInterface {

    /**
     * Confirm email with token
     */
    async usersUserIdEmailsIdConfirmPatchRaw(requestParameters: UsersUserIdEmailsIdConfirmPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Email>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling usersUserIdEmailsIdConfirmPatch.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersUserIdEmailsIdConfirmPatch.');
        }

        if (requestParameters.confirmEmail === null || requestParameters.confirmEmail === undefined) {
            throw new runtime.RequiredError('confirmEmail','Required parameter requestParameters.confirmEmail was null or undefined when calling usersUserIdEmailsIdConfirmPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/users/{userId}/emails/{id}/confirm`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ConfirmEmailToJSON(requestParameters.confirmEmail),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailFromJSON(jsonValue));
    }

    /**
     * Confirm email with token
     */
    async usersUserIdEmailsIdConfirmPatch(userId: number, id: number, confirmEmail: ConfirmEmail, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Email> {
        const response = await this.usersUserIdEmailsIdConfirmPatchRaw({ userId: userId, id: id, confirmEmail: confirmEmail }, initOverrides);
        return await response.value();
    }

    /**
     * Delete user email
     */
    async usersUserIdEmailsIdDeleteRaw(requestParameters: UsersUserIdEmailsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling usersUserIdEmailsIdDelete.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersUserIdEmailsIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/users/{userId}/emails/{id}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete user email
     */
    async usersUserIdEmailsIdDelete(userId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersUserIdEmailsIdDeleteRaw({ userId: userId, id: id }, initOverrides);
    }

    /**
     * Send confirmation token to user email
     */
    async usersUserIdEmailsIdSendConfirmationPatchRaw(requestParameters: UsersUserIdEmailsIdSendConfirmationPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling usersUserIdEmailsIdSendConfirmationPatch.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersUserIdEmailsIdSendConfirmationPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/users/{userId}/emails/{id}/send-confirmation`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Send confirmation token to user email
     */
    async usersUserIdEmailsIdSendConfirmationPatch(userId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersUserIdEmailsIdSendConfirmationPatchRaw({ userId: userId, id: id }, initOverrides);
    }

    /**
     * Create user email
     */
    async usersUserIdEmailsPostRaw(requestParameters: UsersUserIdEmailsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Email>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling usersUserIdEmailsPost.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersUserIdEmailsPost.');
        }

        if (requestParameters.createEmail === null || requestParameters.createEmail === undefined) {
            throw new runtime.RequiredError('createEmail','Required parameter requestParameters.createEmail was null or undefined when calling usersUserIdEmailsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/users/{userId}/emails`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateEmailToJSON(requestParameters.createEmail),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailFromJSON(jsonValue));
    }

    /**
     * Create user email
     */
    async usersUserIdEmailsPost(userId: number, id: number, createEmail: CreateEmail, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Email> {
        const response = await this.usersUserIdEmailsPostRaw({ userId: userId, id: id, createEmail: createEmail }, initOverrides);
        return await response.value();
    }

}
