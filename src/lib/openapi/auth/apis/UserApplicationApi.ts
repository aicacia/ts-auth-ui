/* tslint:disable */
/* eslint-disable */
/**
 * Auth API
 * Auth API API
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: nathanfaucett@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Application,
  PaginationApplication,
  UpdateApplication,
} from '../models/index';
import {
    ApplicationFromJSON,
    ApplicationToJSON,
    PaginationApplicationFromJSON,
    PaginationApplicationToJSON,
    UpdateApplicationFromJSON,
    UpdateApplicationToJSON,
} from '../models/index';

export interface UsersUserIdApplicationsGetRequest {
    userId: number;
    limit?: number;
    offset?: number;
}

export interface UsersUserIdApplicationsIdDeleteRequest {
    userId: number;
    id: number;
}

export interface UsersUserIdApplicationsIdPatchRequest {
    userId: number;
    id: number;
    application: UpdateApplication;
}

/**
 * UserApplicationApi - interface
 * 
 * @export
 * @interface UserApplicationApiInterface
 */
export interface UserApplicationApiInterface {
    /**
     * 
     * @summary Get user applications
     * @param {number} userId user id
     * @param {number} [limit] limit
     * @param {number} [offset] offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApplicationApiInterface
     */
    usersUserIdApplicationsGetRaw(requestParameters: UsersUserIdApplicationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginationApplication>>;

    /**
     * Get user applications
     */
    usersUserIdApplicationsGet(userId: number, limit?: number, offset?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginationApplication>;

    /**
     * 
     * @summary Delete application
     * @param {number} userId user id
     * @param {number} id application id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApplicationApiInterface
     */
    usersUserIdApplicationsIdDeleteRaw(requestParameters: UsersUserIdApplicationsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete application
     */
    usersUserIdApplicationsIdDelete(userId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Update application
     * @param {number} userId user id
     * @param {number} id application id
     * @param {UpdateApplication} application update application
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApplicationApiInterface
     */
    usersUserIdApplicationsIdPatchRaw(requestParameters: UsersUserIdApplicationsIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Application>>;

    /**
     * Update application
     */
    usersUserIdApplicationsIdPatch(userId: number, id: number, application: UpdateApplication, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Application>;

}

/**
 * 
 */
export class UserApplicationApi extends runtime.BaseAPI implements UserApplicationApiInterface {

    /**
     * Get user applications
     */
    async usersUserIdApplicationsGetRaw(requestParameters: UsersUserIdApplicationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginationApplication>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling usersUserIdApplicationsGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/users/{userId}/applications`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginationApplicationFromJSON(jsonValue));
    }

    /**
     * Get user applications
     */
    async usersUserIdApplicationsGet(userId: number, limit?: number, offset?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginationApplication> {
        const response = await this.usersUserIdApplicationsGetRaw({ userId: userId, limit: limit, offset: offset }, initOverrides);
        return await response.value();
    }

    /**
     * Delete application
     */
    async usersUserIdApplicationsIdDeleteRaw(requestParameters: UsersUserIdApplicationsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling usersUserIdApplicationsIdDelete.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersUserIdApplicationsIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/users/{userId}/applications/{id}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete application
     */
    async usersUserIdApplicationsIdDelete(userId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersUserIdApplicationsIdDeleteRaw({ userId: userId, id: id }, initOverrides);
    }

    /**
     * Update application
     */
    async usersUserIdApplicationsIdPatchRaw(requestParameters: UsersUserIdApplicationsIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Application>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling usersUserIdApplicationsIdPatch.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersUserIdApplicationsIdPatch.');
        }

        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling usersUserIdApplicationsIdPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/users/{userId}/applications/{id}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateApplicationToJSON(requestParameters.application),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationFromJSON(jsonValue));
    }

    /**
     * Update application
     */
    async usersUserIdApplicationsIdPatch(userId: number, id: number, application: UpdateApplication, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Application> {
        const response = await this.usersUserIdApplicationsIdPatchRaw({ userId: userId, id: id, application: application }, initOverrides);
        return await response.value();
    }

}
